podTemplate(
    name: 'questcode',
    namespace: 'devops', 
    label: 'questcode',
    containers: [
            containerTemplate(args: 'cat', command: '/bin/sh -c', image: 'docker', livenessProbe: containerLivenessProbe(execArgs: '', failureThreshold: 0, initialDelaySeconds: 0, periodSeconds: 0, successThreshold: 0, timeoutSeconds: 0), name: 'docker-container', resourceLimitCpu: '', resourceLimitMemory: '', resourceRequestCpu: '', resourceRequestMemory: '', ttyEnabled: true),
            containerTemplate(args: 'cat', command: '/bin/sh -c', image: 'lachlanevenson/k8s-helm:v2.11.0', name: 'helm-container', ttyEnabled: true)
        ],
    volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')], 
)
{
    //  Start Pipeline
    node('questcode') {
        def REPOS
        def IMAGE_VERSION
        def IMAGE_POSFIX = ""
        def KUBE_NAMESPACE
        def IMAGE_NAME =  "questcode-frontend"
        def ENVIROMENT = "staging"
        def GIT_REPOS_URL = "git@gitlab.com:victormf.df/questcode-frontend.git"
        def GIT_BRANCH
        def HELM_CHART_NAME = "questcode/frontend"
        def HELM_DEPLOY_NAME
        def CHARTMUSEUM_URL = "http://helm-chartmuseum:8080"
        def NODE_PORT
        stage('Checkout') {
            echo 'Iniciando Clone do Repositorio'
            REPOS = checkout([$class: 'GitSCM', branches: [[name: '*/master'], [name: '*/develop']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab', url: GIT_REPOS_URL]]])
            GIT_BRANCH = REPOS.GIT_BRANCH
            // Com base na branch, direciona ao ambiente correto 
            if(GIT_BRANCH.equals("origin/master")){
                echo "BRANCH MASTER"
                KUBE_NAMESPACE = "prod"
                ENVIROMENT = KUBE_NAMESPACE
                NODE_PORT = "30080"
            }else if (GIT_BRANCH.equals("origin/develop")){
                echo "BRANCH DEVELOP"
                KUBE_NAMESPACE = "staging"
                ENVIROMENT = KUBE_NAMESPACE
                IMAGE_POSFIX = "-RC"
                NODE_PORT = "31080"
            }else{
                def error = "Nao existe pipeline para branch ${GIT_BRANCH}"
                echo error
                throw new Exception(error)

            }
            HELM_DEPLOY_NAME = KUBE_NAMESPACE + "-frontend"
            IMAGE_VERSION = sh label: '', returnStdout: true, script: 'sh read-package-version.sh'
            IMAGE_VERSION = IMAGE_VERSION.trim() + IMAGE_POSFIX
        }
        stage('Package') {
            container('docker-container') {
                echo 'Iniciando empacotamento com Docker'
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USER')]) {
                    sh label: '', script: "docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}"
                    sh label: '', script: "docker build -t ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_VERSION} . --build-arg NPM_ENV='${ENVIROMENT}'"
                    sh label: '', script: "docker push ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_VERSION}"
        
                }
                
            }
        }
        stage('Deploy') {
            // CLIENT DO HELM
            container('helm-container') {
                echo 'Iniciando Deploy com Helm'
                sh label: '', script: """
                                        helm init --client-only
                                        helm repo add questcode ${CHARTMUSEUM_URL}
                                        helm repo update
                                      """
                try {
                    sh label: '', script: "helm upgrade --namespace=${KUBE_NAMESPACE} ${HELM_DEPLOY_NAME} ${HELM_CHART_NAME} --set image.tag=${IMAGE_VERSION} --set service.nodePort=${NODE_PORT}"
                }catch(Exception e) {
                    sh label: '', script: "helm install --namespace=${KUBE_NAMESPACE} --name ${HELM_DEPLOY_NAME} ${HELM_CHART_NAME} --set image.tag=${IMAGE_VERSION} --set service.nodePort=${NODE_PORT}"
                }
            }
        }
    }// end of node
}